AWSTemplateFormatVersion: '2010-09-09'
Description: Instance PostgreSQL Database
Parameters:
  Environment:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - staging
      - prod
  Name:
    Type: String

  BusinessSG:
    Type: String
  BastionSG:
    Type: String
    Default: "-"

  VPCData:
    Type: AWS::EC2::VPC::Id
  
  AppName:
    Type: String
    Description: The project name.
  RdsInstanceClass:
    Type: String
    Description: Name of the instance of Rds. See allowed values at https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.Types.html
    Default: 'db.t3.micro'
  RdsStorageGib:
    Type: Number
    Description: Storage size in Gib.
    Default: 20
  RdsEngine:
    Type: String
    Description: Name of the databases engine. See allowed values at https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html
    Default: 'postgres'
  RdsVersion:
    Type: String
    Description: Version of the database engine
    Default: '16.4'
  DbName:
    Type: String
    Description: Name of the database to create.
    Default: 'generic_db'
  DbUserName:
    Type: String
    Description: Username for the database access.
    NoEcho: 'true'
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: 'dbadminUser'
  DbPort:
    Type: Number
    Description: Port for the database access.
    Default: 5432
  BastionCreated:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  AssociateBastion: !Equals
    - !Ref BastionCreated
    - 'true'

Resources:
  RoleRdsMonitoring:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Environment}-${AppName}-rds-Monitoring-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: "/"
  DBPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "${Environment}-${AppName}-DBPassword"
      Description: !Sub 'Generated by the CDK for stack: ${AWS::StackName}'
      GenerateSecretString:
        ExcludeCharacters: ' %+~`#$&*()|[]{}:;<>?!''/@"\=^,'
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: !Sub '{"username":"${DbUserName}"}'
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet Group for PostgreSQL database
      DBSubnetGroupName: !Sub '${Name}-subnetgroup'
      SubnetIds:
        Fn::Transform:
            Name: 'read-ssm-from-path'
            Parameters:
              Path: !Sub '/config/infra/${AppName}/private_subnet/'
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      StorageEncrypted: true
      DBInstanceIdentifier: !Sub '${Name}-dbinstance'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt SGDBnoIngress.GroupId
      AllocatedStorage: !Ref RdsStorageGib
      DBInstanceClass: !Ref RdsInstanceClass
      Engine: !Ref RdsEngine
      EngineVersion: !Ref RdsVersion
      MasterUsername: !Ref DbUserName
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBPassword}:SecretString:password::}}'
      Tags:
        - Key: Name
          Value: !Sub '${Name}-rds'
      BackupRetentionPeriod: 35
      EnablePerformanceInsights: false # Should come from toml file
      MonitoringInterval: 60
      MaxAllocatedStorage: 150
      MonitoringRoleArn: !GetAtt RoleRdsMonitoring.Arn
      MultiAZ: false # Should come from toml file

    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
  SSMDbConfig:
    Type: 'AWS::SSM::Parameter'
    Properties:
      DataType: text
      Name: !Sub "/config/infra/${Environment}/db/credentials"
      Tier: Standard
      Type: String
      Value: !Sub |
          {
            "db-name": "${DbName}",
            "db-user": "${DbUserName}",
            "db-password": "${DBPassword}",
            "db-host": "${DBInstance.Endpoint.Address}",
            "db-port": "${DbPort}"
          }
  SGDBnoIngress:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${Name}-Access-Bastion-DB'
      GroupDescription: Security group to allow access from
      VpcId: !Ref VPCData
      SecurityGroupIngress:
        - FromPort: !Ref DbPort
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BusinessSG
          ToPort: !Ref DbPort
        - !If
          - AssociateBastion
          - FromPort: 5432
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref BastionSG
            ToPort: 5432
          - !Ref AWS::NoValue
Outputs:
  DBEndpoint:
    Description: Connection endpoint for the database
    Value: !GetAtt DBInstance.Endpoint.Address