AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: Configure associations to allow access to resource.

Parameters:
  AppName:
    Type: String
    ConstraintDescription: '[a-z]+'
    Description: The project name.
  Name:
    Type: String
    Description: An environment name that will be prefixed to resource names

  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to
  
  VpcStackName:
    Type: String
    Description: Name of the vpc stack
  
  NatGatewatStackName:
    Type: String
    Description: Name of the nat gateway stack

  PrivateSubnets:
    Type: CommaDelimitedList
    Description: List of IP range (CIDR notation) for the private subnet in the first Availability Zone

  PublicSubnets:
    Type: CommaDelimitedList
    Description: List of IP range (CIDR notation) for the public subnet in the first Availability Zone

  InternetGateway:
    Type: String
    Default: "-"
  
  VpcEnableS3Gateway:
    Type: String
    Description: Flag to create a vpc endpoint between nat gateway and s3
    Default: 'true'
    AllowedValues:
       - 'true'
       - 'false'

Conditions:
  CreateS3GatewayEndpoint: !Equals ['true', !Ref VpcEnableS3Gateway]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Common SG for application vpc
      GroupName: !Sub '${Name}-security-group'
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'
      Tags:
      - Key: Name
        Value: !Sub '${Name} Security Group'

  SGEntrySelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      Description: access from self
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: '-1'
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCID
      Tags:
      - Key: Name
        Value: !Sub '${Name}-private-route-table'
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCID
      Tags:
      - Key: Name
        Value: !Sub '${Name}-public-route-table'
  
  InternetEgressAssociation:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ##############  Private subnet associations  ##############
  'Fn::ForEach::PrivateSubnetRouteTableAssociations':
    - SubnetName
    - !Ref PrivateSubnets
    - 'PrivateSubnet${SubnetName}RouteTableAssociation':
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:
            Fn::ImportValue: 
              'Fn::Sub': '${VpcStackName}-PrivateSubnet${SubnetName}'
          RouteTableId: !Ref PrivateRouteTable

  ##############  Public subnet associations  ##############
  'Fn::ForEach::PublicSubnetRouteTableAssociations':
    - SubnetName
    - !Ref PublicSubnets
    - 'PublicSubnet${SubnetName}RouteTableAssociation':
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:
            Fn::ImportValue: 
              'Fn::Sub': '${VpcStackName}-PublicSubnet${SubnetName}'
          RouteTableId: !Ref PublicRouteTable

  SSMSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/infra/${AppName}/security-group"
      Tier: "Standard"
      Type: "String"
      Value: !Ref SecurityGroup

  S3GatewayEndpoint:
    Condition: CreateS3GatewayEndpoint
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPCID
      RouteTableIds:
        - !Ref PrivateRouteTable


Outputs:
  PublicRouteTable:
    Value: !Ref PublicRouteTable
    Description: Public Route Table for public subnets

  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
    Description: Public Route Table for private subnets

  SG:
    Description: A reference to the security group
    Value: !Ref SecurityGroup