AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: This template deploys a VPC
Parameters:
  AppName:
    Type: String
    ConstraintDescription: '[a-z]+'
    Description: The project name.
  Name:
    Type: String
    Description: Name to identify

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: AWS::SSM::Parameter::Value<String>

  PrivateSubnets:
    Type: CommaDelimitedList
    Description: List of IP range (CIDR notation) for the private subnet in the first Availability Zone

  PublicSubnets:
    Type: CommaDelimitedList
    Description: List of IP range (CIDR notation) for the public subnet in the first Availability Zone

Mappings:
  AvailabilityZone:
    A:
      Index: 0
    B:
      Index: 1
    C:
      Index: 2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: True
      EnableDnsHostnames: True
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${Name}-vpc'

  #PRIVATE SUBNETS
  'Fn::ForEach::PrivateSubnetsLoop':
    - SubnetName
    - !Ref PrivateSubnets
    - 'PrivateSubnet${SubnetName}':
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select
            - !FindInMap
              - AvailabilityZone
              - !Ref SubnetName
              - Index
            - !GetAZs
          CidrBlock: !Sub '{{resolve:ssm:/config/infra/${AppName}/vpc-networking/cidr-private-subnet/${SubnetName}}}'
          MapPublicIpOnLaunch: false
          Tags:
          - Key: Name
            Value: !Sub '${Name}-private-subnet-${SubnetName}'
  
  'Fn::ForEach::PrivateSubnetsOutputSSM':
    - SubnetName
    - !Ref PrivateSubnets
    - 'Fn::ForEach::GetAttLoop':
      - Property
      - [SubnetId]
      - 'Private${Property}${SubnetName}':
          Type: AWS::SSM::Parameter
          Properties:
            Name: !Sub "/config/infra/${AppName}/private_subnet/${SubnetName}"
            Type: String
            Value: !GetAtt 
              - !Sub 'PrivateSubnet${SubnetName}'
              - !Ref Property
  
  #PUBLIC SUBNETS
  'Fn::ForEach::PublicSubnetsLoop':
    - SubnetName
    - !Ref PublicSubnets
    - 'PublicSubnet${SubnetName}':
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select
            - !FindInMap
              - AvailabilityZone
              - !Ref SubnetName
              - Index
            - !GetAZs
          CidrBlock: !Sub '{{resolve:ssm:/config/infra/${AppName}/vpc-networking/cidr-public-subnet/${SubnetName}}}'
          MapPublicIpOnLaunch: true
          Tags:
          - Key: Name
            Value: !Sub '${Name}-public-subnet-${SubnetName}'
  
  'Fn::ForEach::PublicSubnetsOutputSSM':
    - SubnetName
    - !Ref PublicSubnets
    - 'Fn::ForEach::GetAttLoop':
      - Property
      - [SubnetId]
      - 'Public${Property}${SubnetName}':
          Type: AWS::SSM::Parameter
          Properties:
            Name: !Sub "/config/infra/${AppName}/public_subnet/${SubnetName}"
            Type: String
            Value: !GetAtt 
              - !Sub 'PublicSubnet${SubnetName}'
              - !Ref Property

  VPCParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/infra/${AppName}/vpc_id"
      Type: String
      Value: !Ref VPC
  
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref VPC

Outputs:
  StackName:
    Value: !Sub '${AWS::StackName}'

  VPCID:
    Value: !Ref VPC

  VPCCIDR:
    Value: !Ref VpcCIDR
    Description: Data VPC CIDR
  
  ServiceSGId:
    Description: The ECS service security group associated
    Value: !GetAtt ServiceSecurityGroup.GroupId

  'Fn::ForEach::PrivateSubnetOutputs':
    - SubnetName
    - !Ref PrivateSubnets
    - 'Fn::ForEach::GetAttLoop':
        - Property
        - [SubnetId]
        - 'Private${Property}${SubnetName}Out':
            Value: !GetAtt [!Sub 'PrivateSubnet${SubnetName}', !Ref Property]
            Export:
              Name: !Sub '${AWS::StackName}-PrivateSubnet${SubnetName}'

  'Fn::ForEach::PublicSubnetOutputs':
    - SubnetName
    - !Ref PublicSubnets
    - 'Fn::ForEach::GetAttLoop':
        - Property
        - [SubnetId]
        - 'Public${Property}${SubnetName}Out':
            Value: !GetAtt [!Sub 'PublicSubnet${SubnetName}', !Ref Property]
            Export:
              Name: !Sub '${AWS::StackName}-PublicSubnet${SubnetName}'
